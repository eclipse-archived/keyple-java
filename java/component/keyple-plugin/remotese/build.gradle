apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'org.eclipse.keyple'

project.description ='Keyple Remote SE Plugin Master and Slave'
archivesBaseName = "keyple-java-plugin-remotese"
sourceCompatibility = 1.6

//copy license file from root folder to each generated artifact
task copyLICENSEplugin(type: Copy) {
    from file("${projectDir}/../../../../LICENSE")
    into file("${buildDir}/resources/main/META-INF/")
}

//copy notice file from root folder to each generated artifact
task copyNOTICEplugin(type: Copy) {
    from file("${projectDir}/../../../../NOTICE.md")
    into file("${buildDir}/resources/main/META-INF/")
}

//declare manifest
jar {
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.version
    }
}

classes.dependsOn copyLICENSEplugin, copyNOTICEplugin

//generate sources jar
task sourcesJar(type: Jar, dependsOn : classes) {
    classifier = 'sources'
    from sourceSets.main.output, sourceSets.main.java
}

//generate javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//publish javadoc, sources and jar
artifacts {
    archives sourcesJar, javadocJar
}

//sign if needed (based on the doSign variable)
if (project.getProperties().containsKey("doSign") && doSign=="true") {
    apply plugin: 'signing'

    ext."signing.keyId" = "0C140E36"
    //other properties are defined in the gradle.properties
    signing {
        sign configurations.archives
    }
}

//define local or remote upload repository (based on the doSign variable)
/* from https://central.sonatype.org/pages/gradle.html */
uploadArchives {
    repositories {
        mavenDeployer {
            if (project.getProperties().containsKey("doSign") && doSign=="true") {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }else {
                repository(url: mavenLocal().url)
            }
        }
    }
}

//overwrite pom definition values
uploadArchives {
    repositories {
        mavenDeployer {
            pom.project {
                name "Keyple Plugin Remotese"
                description project.description
                url "https://projects.eclipse.org/projects/iot.keyple"

                organization("Eclipse Keyple"){
                    name "Eclipse Keyple"
                    url "https://projects.eclipse.org/projects/iot.keyple"
                }

                scm {
                    connection 'scm:git:git://github.com/eclipse/keyple-java.git'
                    developerConnection 'scm:git:https://github.com/eclipse/keyple-java.git'
                    url 'http://github.com/eclipse/keyple-java/tree/master'
                }


                licenses {
                    license {
                        name 'Eclipse Public License - v 2.0'
                        url 'https://www.eclipse.org/legal/epl-2.0/'
                    }
                }

                developers {
                    developer {
                        name 'Olivier Delcroix'
                        email 'odelcroi@gmail.com'
                    }
                    developer {
                        name 'Jean-Pierre Fortune'
                        email 'jean-pierre.fortune@ialto.com'
                    }
                    developer {
                        name 'Pierre Terr√©e'
                        email 'pierre.terree@calypsonet.org'
                    }
                }

                //dependencies mapping is defined manually
                pom.scopeMappings.with {
                    mappings.clear()
                    addMapping(1, configurations.implementation, 'compile')
                    addMapping(2, configurations.api, 'runtime')
                    addMapping(3, configurations.testImplementation, 'test')
                }

            }
        }
    }
}

task installPlugin{
    group 'keyple'
    description 'Builds and installs  the keyple remotese plugin into maven local repository'
    dependsOn ':java:component:keyple-plugin:keyple-plugin-remotese:uploadArchives'

    doLast {
        println 'Keyple Remote SE Plugin has been installed into maven local repo at path : ' + project.getRepositories().get(0).getAt("url")
    }
}

dependencies {
    //use java library : keyple core
    //api project(path:':java:component:keyple-core')
    api group: 'org.eclipse.keyple', name: 'keyple-java-core', version: project.version

    implementation "com.google.code.gson:gson:${gson_version}"

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    api "org.slf4j:slf4j-api:${slf4japi_version}"

    /*
    Tests
     */
    //add slf4j simple logger implementation
    testImplementation "org.slf4j:slf4j-simple:${slf4jsimple_version}"
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation "junit:junit:${junit_version}"
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation "org.mockito:mockito-core:${mockitocore_version}"

    //use keyple library : keyple plugin stub unit tests
    testImplementation project(path: ':java:component:keyple-plugin:keyple-plugin-stub', configuration: 'testArtifacts')
    testImplementation project(path: ':java:component:keyple-plugin:keyple-plugin-stub')

    //use keyple library : keyple calypso
    //testImplementation 'org.eclipse.keyple:keyple-calypso:1.+'
    testImplementation project(path:':java:component:keyple-calypso')

}


/*
//Create jar for Native Reader Client
task nativeJar(type: Jar, group: 'build') {

    baseName project.name+ "-native-reader"

    //define classes to be included
    from(sourceSets.main.output) {
        include "org/eclipse/keyple/plugin/remotese/nativese/**"
    }

    //include META-INF resources copied by copyLICENSE and copyNOTICE tasks
    into 'META-INF', {
        from "${buildDir}/resources/main/META-INF/"
    }

    manifest {
        attributes 'Implementation-Title': 'Keyple Remote SE - Native Reader',
                'Implementation-Version': project.version
    }
}

//Create jar for Remote SE Plugin
task pluginJar(type: Jar, group: 'build') {

    baseName project.name+ "-plugin"

    //define classes to be included
    from(sourceSets.main.output) {
        include "org/eclipse/keyple/plugin/remotese/pluginse/**"
    }

    //include META-INF resources copied by copyLICENSE and copyNOTICE tasks
    into 'META-INF', {
        from "${buildDir}/resources/main/META-INF/"
    }

    manifest {
        attributes 'Implementation-Title': 'Keyple Remote SE - Plugin',
                'Implementation-Version': project.version
    }

}

//Create jar for Transport classes
task transportJar(type: Jar, group: 'build') {

    baseName project.name+ "-transport-api"

    //define classes to be included
    from(sourceSets.main.output) {
        include "org/eclipse/keyple/plugin/remotese/transport/**"
    }

    //include META-INF resources copied by copyLICENSE and copyNOTICE tasks
    into 'META-INF', {
        from "${buildDir}/resources/main/META-INF/"
    }

    manifest {
        attributes 'Implementation-Title': 'Keyple Remote SE - Transport',
                'Implementation-Version': project.version
    }

}
*/
/*

Old configuration to generate 3 jars

//pluginJar.dependsOn copyLICENSE, copyNOTICE
//transportJar.dependsOn copyLICENSE, copyNOTICE
//nativeJar.dependsOn copyLICENSE, copyNOTICE


configurations {
    //nativeJarArtifact.extendsFrom runtime
    //pluginJarArtifact.extendsFrom runtime
    //transportJarArtifact.extendsFrom runtime
}
artifacts {
    //nativeJarArtifact nativeJar
    //pluginJarArtifact pluginJar
    //transportJarArtifact transportJar
}

publishing {
    //publish Native SE Client
    publications {
        customPluginJar(MavenPublication) {
            groupId = project.group
            artifactId = pluginJar.baseName
            version = project.version
            artifact pluginJar
            //add dependencies to pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies, adding keyple-core and slf4j
                configurations.implementation.allDependencies.each {
                    if(it.name == 'keyple-core' || it.name == 'slf4j-api'){
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    //publish Remote SE Plugin
    publications {
        customNativeJar(MavenPublication) {
            groupId = project.group
            artifactId = nativeJar.baseName
            version = project.version
            artifact nativeJar

            //add dependencies to pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies, adding keyple-core and slf4j
                configurations.implementation.allDependencies.each {
                    if(it.name == 'keyple-core' || it.name == 'slf4j-api'){
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    //publish Remote SE Transport
    publications {
        customTransportJar(MavenPublication) {
            groupId = project.group
            artifactId = transportJar.baseName
            version = project.version
            artifact transportJar

            //add dependencies to pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the implementation dependencies, adding gson and keyple-core only
                configurations.implementation.allDependencies.each {
                    if(it.name == 'gson' || it.name == 'keyple-core'){
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
*/
