buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.14.0"
    }
}


apply from: '../common.gradle'

subprojects {
    /*
    plugins {
        id "com.diffplug.gradle.spotless" version "3.14.0"
    }
    */

    group 'org.eclipse.keyple'
    apply plugin: 'pmd'


    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }


    pmd {
        ruleSets = [
                "java-basic",
                "java-braces",
                "java-strings",
                "java-imports",
                "java-unnecessary",
                "java-unusedcode",
//                "java-metrics",
                "java-empty",
                "java-codesize",
                "java-clone",
                "java-typeresolution",
                "java-strictexception",
                "java-finalizers",
                "java-migrating",
                "java-logging-java",
//                 "java-controversial",
                "java-sunsecure",
                "java-junit",
                "java-optimizations",
//                "java-naming",
                "java-coupling",
                "java-design",
                "java-comments"
        ]
    }


//    spotless {
//        java {
//            target '**/*.java'
//
//            licenseHeaderFile '../.build/spotless.license.txt'
//
//            importOrder 'java', 'javax', 'org', 'com', 'com.diffplug', ''
//
//            removeUnusedImports()
//
//            eclipse().configFile '../.build/spotless.eclipseformat.xml'
//        }
//
//        format 'misc', {
//            target '**/*.java', '**/*.gradle', '**/*.yml', '**/*.md'
//
//            indentWithSpaces()
//            endWithNewline()
//        }
//    }


}


allprojects {


}


//create task for to agragate javadoc
task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    println 'Create a aggregated javadoc Task to : ' + "$buildDir/docs/javadoc"
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name " +  project(":java:component:keyple-core").version + " version API"
    options.author true
    options.links  'http://docs.oracle.com/javase/6/docs/api/',
            "http://d.android.com/reference/",
            'http://seek-for-android.github.io/javadoc/V4.0.0/'


    options.addStringOption 'Xdoclint:none', '-quiet'

    //init source to whatever file to avoid NO-SOURCE
    source = 'README.MD'
}

//dynamically configure the source
aggregatedJavadocs.doFirst {

    //exclude the init file
    excludes += "README.MD"

    //add Android modules javadoc
    def aggregatedAndroidProjects = [
                                  project(":keyple-plugin:keyple-plugin-android-nfc"),
                                  project(":keyple-plugin:keyple-plugin-android-omapi")]

    aggregatedAndroidProjects.each { aggregatedAndroidProject ->
            source += aggregatedAndroidProject.generateDebugJavadoc.source
            classpath += aggregatedAndroidProject.generateDebugJavadoc.classpath
            excludes += aggregatedAndroidProject.generateDebugJavadoc.excludes
            includes += aggregatedAndroidProject.generateDebugJavadoc.includes

    }

}
