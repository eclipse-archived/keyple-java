buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.27.1"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.10.0"
    }
}

ext {
    timestamp = new Date().format('yyyyMMdd')
}

allprojects {

    group 'org.eclipse.keyple'
    apply plugin: 'pmd'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: "com.diffplug.gradle.spotless"

    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }


    pmd {
        ruleSets = [
                "java-basic",
                "java-braces",
        ]
    }
}

subprojects{

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    spotless {
        kotlin {
            target "**/*.kt"
            ktlint()

            // also supports license headers
            licenseHeader '/********************************************************************************\n' +
                    ' * Copyright (c) $YEAR Calypso Networks Association https://www.calypsonet-asso.org/\n' +
                    ' *\n' +
                    ' * See the NOTICE file(s) distributed with this work for additional information regarding copyright\n' +
                    ' * ownership.\n' +
                    ' *\n' +
                    ' * This program and the accompanying materials are made available under the terms of the Eclipse\n' +
                    ' * Public License 2.0 which is available at http://www.eclipse.org/legal/epl-2.0\n' +
                    ' *\n' +
                    ' * SPDX-License-Identifier: EPL-2.0\n' +
                    ' ********************************************************************************/'
        }
    }
}

task javadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = dokka.outputDirectory
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from dokka.outputDirectory
}

//create task for to agragate javadoc
/*
task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all child projects as if it was a single project', group: 'Documentation') {
    println 'Create a aggregated javadoc Task to : ' + "$buildDir/docs/javadoc"
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name " +  project(":java:component:keyple-core").version + " version API"
    options.author true
    options.links  'http://docs.oracle.com/javase/6/docs/api/',
            "http://d.android.com/reference/",
            'http://seek-for-android.github.io/javadoc/V4.0.0/'


    options.addStringOption 'Xdoclint:none', '-quiet'

    //init source to whatever file to avoid NO-SOURCE
    source = 'README.MD'
}

//dynamically configure the source
aggregatedJavadocs.doFirst {

    //exclude the init file
    excludes += "README.MD"

    //add Android modules javadoc
    def aggregatedAndroidProjects = [
                                  project(":keyple-plugin:keyple-plugin-android-nfc"),
                                  project(":keyple-plugin:keyple-plugin-android-omapi")]

    aggregatedAndroidProjects.each { aggregatedAndroidProject ->
            source += aggregatedAndroidProject.generateDebugJavadoc.source
            classpath += aggregatedAndroidProject.generateDebugJavadoc.classpath
            excludes += aggregatedAndroidProject.generateDebugJavadoc.excludes
            includes += aggregatedAndroidProject.generateDebugJavadoc.includes

    }

}
*/