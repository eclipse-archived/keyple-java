apply from: "../../build.gradle"

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.eclipse.keyple'
apply plugin: 'jacoco'
apply plugin: 'jacoco-android'
apply plugin: 'org.sonarqube'


archivesBaseName = "keyple-android-plugin-nfc"

group 'org.eclipse.keyple'
project.description = 'Keyple Plugin Android Nfc'


android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionName project.version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled  false
            testCoverageEnabled true
        }
        debug { 
            testCoverageEnabled = true 
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }

    testOptions {
        unitTests {
            returnDefaultValues = true//mock Log Android object
            includeAndroidResources = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    //generate output aar with a qualified name : with version number
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}.aar"
            }
        }
    }

    //create a task to generate javadoc for each variants
    libraryVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for variant ${variant.name.capitalize()}"
            //println "Create Javadoc Task for variant ${variant.name.capitalize()}"

            source = variant.javaCompile.source
            options.links("http://docs.oracle.com/javase/6/docs/api/")
            options.links("http://d.android.com/reference/")

            //println 'classpath : ' + classpath.getFiles()
            //println 'options links : ' + options.links
            //println 'source : ' + source.getFiles()

            // First add all of your dependencies to the classpath, then add the android jars
            doFirst {
                //doFirst is needed else we get the error "Cannot create variant 'android-lint' after configuration" with gradle 4.4+
                classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            }
            classpath += files(android.getBootClasspath())


            // We're excluding these generated files
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
            failOnError = false
            destinationDir = file("${project.docsDir}/javadoc")
            //destinationDir = file(System.getProperty("user.home") +"/pages")

        }

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

}

jacoco {
    toolVersion "0.8.5"
}

jacocoAndroidUnitTestReport {
  csv.enabled false
  html.enabled true
  xml.enabled true
}

sonarqube {
    properties {
        property "sonar.projectKey", "eclipse_keyple-plugin_android-nfc"
        property "sonar.organization", "eclipse"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv('SONAR_LOGIN')
        property "sonar.branch.name", System.getenv('BRANCH_NAME')
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestDebugUnitTestReport/jacocoTestDebugUnitTestReport.xml"
    }
}

//build sources jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

//declare javadoc and sources jar as artifacts also
artifacts {
    archives androidSourcesJar, javadocJar
}

//sign if needed (based on the doSign variable)
if (project.getProperties().containsKey("doSign") && doSign=="true") {
    apply plugin: 'signing'

    ext."signing.keyId" = "0C140E36"
    //other properties are defined in the gradle.properties
    signing {
        sign configurations.archives
    }
}

/* from https://central.sonatype.org/pages/gradle.html */
uploadArchives  {
    repositories {
        mavenDeployer {
            //define local or remote upload repository (based on the doSign variable)
            if (project.getProperties().containsKey("doSign") && doSign=="true") {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }else {
                repository(url: mavenLocal().url)
            }

            pom.project {
                name project.description
                description project.description
                url "https://projects.eclipse.org/projects/iot.keyple"

                packaging "aar"

                organization("Eclipse Keyple"){
                    name "Eclipse Keyple"
                    url "https://projects.eclipse.org/projects/iot.keyple"
                }

                scm {
                    connection 'scm:git:git://github.com/eclipse/keyple-java.git'
                    developerConnection 'scm:git:https://github.com/eclipse/keyple-java.git'
                    url 'http://github.com/eclipse/keyple-java/tree/master'
                }

                licenses {
                    license {
                        name 'Eclipse Public License - v 2.0'
                        url 'https://www.eclipse.org/legal/epl-2.0/'
                    }
                }

                developers {
                    developer {
                        name 'Olivier Delcroix'
                        email 'odelcroi@gmail.com'
                    }
                    developer {
                        name 'Jean-Pierre Fortune'
                        email 'jean-pierre.fortune@ialto.com'
                    }
                    developer {
                        name 'Pierre Terr√©e'
                        email 'pierre.terree@calypsonet.org'
                    }
                }

                //dependencies mapping is defined manually
                pom.scopeMappings.with {
                    mappings.clear()
                    addMapping(1, configurations.implementation, 'compile')
                    addMapping(2, configurations.testImplementation, 'test')
                    addMapping(3, configurations.androidTestImplementation, 'test')

                }
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    google()
    jcenter()
}

task installPlugin{
    group 'keyple'
    description 'Builds and installs the keyple Android NFC plugin library into maven local repository'
    dependsOn ':keyple-plugin:keyple-plugin-android-nfc:uploadArchives'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //keyple-core project
    implementation group: 'org.eclipse.keyple', name: 'keyple-java-core', version: project.version

    //android
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'

    //logging
    implementation "org.slf4j:slf4j-api:1.7.25"
    implementation 'com.jakewharton.timber:timber:4.7.1' //Android
    implementation 'com.arcao:slf4j-timber:3.1@aar' //SLF4J binding for Timber

    /*
    Tests
     */
    /** Test **/
    testImplementation "androidx.test:core-ktx:1.3.0"
    testImplementation "junit:junit:4.12"

    /** Mocking for tests **/
    testImplementation "io.mockk:mockk:1.9"

    /** Allow to use Android SDK in JVM */
    testImplementation 'org.robolectric:robolectric:4.3.1'

}
