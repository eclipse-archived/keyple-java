@startuml
title
    Keyple Remote Plugin - Internal API - 1.0.0 (16/11/2020)
end title

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

skinparam Shadowing false
skinparam ClassFontStyle italic
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

package "org.eclipse.keyple.plugin.remote.spi" as packSpi {

    ' Sender
    +interface AsyncEndpointClient {
        +void openSession (String sessionId)
        +void sendMessage (MessageDto msg)
        +void closeSession (String sessionId)
    }
    +interface AsyncEndpointServer {
        +void sendMessage (MessageDto msg)
    }
    +interface SyncEndpointClient {
        +List<MessageDto> sendRequest (MessageDto msg)
    }

    +interface ObservableReaderEventFilter {
        +Object beforePropagation (ReaderEvent event)
        +Class<? extends Object> getUserOutputDataClass ()
        +void afterPropagation (Object userOutputData)
    }
}

package "org.eclipse.keyple.plugin.remote.impl" as packImpl {

    ' Handler
    ~abstract AbstractMessageHandler {
        __
        ~ AbstractMessageHandler ()
        ..
        ~ void bindAsyncNodeClient (\n    AsyncEndpointClient endpoint,\n    int timeoutInSecond)
        ~ void bindAsyncNodeServer (AsyncEndpointServer endpoint)
        ~ void bindSyncNodeClient (\n    SyncEndpointClient endpoint,\n    ServerPushEventStrategy pluginObservationStrategy,\n    ServerPushEventStrategy readerObservationStrategy)
        ~ void bindSyncNodeServer ()
        ~ void checkError (MessageDto message)
        ~ String generateSessionId ()
        ..
        ~ {abstract} **abstract** void onMessage (MessageDto msg)
    }

    ' Node
    ~abstract AbstractNode {
        ~ **final** String nodeId
        __
        ~ AbstractNode (\n    AbstractMessageHandler handler,\n    int timeoutInSecond)
        ..
        ~ {abstract} **abstract** void openSession (String sessionId)
        ~ {abstract} **abstract** MessageDto sendRequest (MessageDto msg)
        ~ {abstract} **abstract** void sendMessage (MessageDto msg)
        ~ {abstract} **abstract** void closeSession (String sessionId)
        ..
        ~ void closeSessionSilently (String sessionId)
    }
    ' Async Node
    ~class "<<<back:yellow>AsyncNodeClient</back>>>\n**final** AsyncNodeClientImpl" as AsyncNodeClientImpl extends AbstractNode {
        ~ AsyncNodeClientImpl (\n    AbstractMessageHandler handler,\n    AsyncEndpointClient endpoint,\n    int timeoutInSecond)
    }
    ~class "<<<back:yellow>AsyncNodeServer</back>>>\n**final** AsyncNodeServerImpl" as AsyncNodeServerImpl extends AbstractNode {
        ~ AsyncNodeServerImpl (\n    AbstractMessageHandler handler,\n    AsyncEndpointServer endpoint,\n    int timeoutInSecond)
    }
    ' Sync Node
    ~class "<<<back:yellow>SyncNodeClient</back>>>\n**final** SyncNodeClientImpl" as SyncNodeClientImpl extends AbstractNode {
        ~ SyncNodeClientImpl (\n    AbstractMessageHandler handler,\n    SyncEndpointClient endpoint,\n    ServerPushEventStrategy pluginObservationStrategy,\n    ServerPushEventStrategy readerObservationStrategy)
    }
    ~class "<<<back:yellow>SyncNodeServer</back>>>\n**final** SyncNodeServerImpl" as SyncNodeServerImpl extends AbstractNode {
        ~ SyncNodeServerImpl (\n    AbstractMessageHandler handler,\n    int timeoutInSecond)
    }

    ' Server Push Event Strategy
    ~class ServerPushEventStrategy {
        --
        ~ServerPushEventStrategy (Type type)
        ..
        ~ServerPushEventStrategy setDuration (int durationInSeconds)
        ~Type getType ()
        ~int getDuration ()
    }
    ~enum Type {
        POLLING
        LONG_POLLING
    }

    ' Factories
    +class "Factory classes..." as Factories {
        ...
    }

    ' Utilities
    +class "Utility classes..." as Utilities {
        ...
    }

    ''''''''''''''' Local

    together {

        ' Native Handler
        ~abstract AbstractLocalService extends AbstractMessageHandler {
            --
            ~ AbstractLocalService ()
            ..
            ~ MessageDto executeLocally (\n    ProxyReader localReader,\n    MessageDto msg)
            ~ ProxyReader findLocalReader (String localReaderName)
        }
        ~class "<<<back:orange>ReaderObserver</back>>>\n<<<back:yellow>LocalServiceClient</back>>>\n**final** LocalServiceClientImpl" as LocalServiceClientImpl extends AbstractLocalService {
            --
            - LocalServiceClientImpl (\n    boolean withReaderObservation,\n    ObservableReaderEventFilter eventFilter)
            ..
            ~ {static} LocalServiceClientImpl createInstance (\n    boolean withReaderObservation,\n    ObservableReaderEventFilter eventFilter)
            ~ {static} LocalServiceClientImpl getInstance ()
        }
        ~class "<<<back:orange>ReaderObserver</back>>>\n<<<back:yellow>LocalServiceServer</back>>>\n**final** LocalServiceServerImpl" as LocalServiceServerImpl extends AbstractLocalService {
            --
            - LocalServiceServerImpl ()
            ..
            ~ {static} LocalServiceServerImpl createInstance ()
            ~ {static} LocalServiceServerImpl getInstance ()
        }
        ~class "<<<back:yellow>PoolLocalServiceServer</back>>>\n**final** PoolLocalServiceServerImpl" as PoolLocalServiceServerImpl extends AbstractLocalService {
            --
            - PoolLocalServiceServerImpl (String[] poolPluginNames)
            ..
            ~ {static} PoolLocalServiceServerImpl createInstance (String[] poolPluginNames)
            ~ {static} PoolLocalServiceServerImpl getInstance ()
        }

    }

    ''''''''''''' Remote

    together {

        ' Remote Handler
        ~abstract "<<<back:orange>Plugin</back>>>\nAbstractRemotePlugin" as AbstractRemotePlugin extends AbstractMessageHandler {
            ~**final** Map<String, Reader> readers
            ~ AbstractRemotePlugin (String name)
        }

        ~class "<<<back:yellow>RemotePluginServer</back>>>\n**final** RemotePluginServerImpl" as RemotePluginServerImpl extends AbstractRemotePlugin {
            ~ RemotePluginServerImpl (\n    String name,\n    ExecutorService eventNotificationPool)
        }
        ~class "<<<back:yellow>RemotePluginClient</back>>>\nRemotePluginClientImpl" as RemotePluginClientImpl extends AbstractRemotePlugin {
            ~ RemotePluginClientImpl (\n    String name,\n    ServerPushEventStrategy readerObservationStrategy,\n    ExecutorService readerEventNotificationPool)
        }
        ~class "<<<back:yellow>ObservableRemotePluginClient</back>>>\n**final** ObservableRemotePluginClientImpl" as ObservableRemotePluginClientImpl extends RemotePluginClientImpl {
            ~ ObservableRemotePluginClientImpl (\n    String name,\n    ServerPushEventStrategy pluginObservationStrategy,\n    ServerPushEventStrategy readerObservationStrategy,\n    ExecutorService pluginEventNotificationPool,\n    ExecutorService readerEventNotificationPool)
        }
        ~class "<<<back:yellow>PoolRemotePluginClient</back>>>\n**final** PoolRemotePluginClientImpl" as PoolRemotePluginClientImpl extends AbstractRemotePlugin {
            ~ PoolRemotePluginClientImpl (String name)
        }

    }

    ' Remote Readers

     together {

        ~abstract "<<<back:orange>AbstractReader</back>>>\nAbstractRemoteReader" as AbstractRemoteReader {
            __
            ~ AbstractRemoteReader (\n    String pluginName,\n    String name,\n    String localReaderName,\n    AbstractNode node,\n    String sessionId,\n    String clientNodeId)
            ..
            ~ String getSessionId ()
            ~ String getClientNodeId ()
            ~ String getLocalReaderName()
            ~ MessageDto sendRequest(MessageDto.Action action,\n    JsonObject body)
        }
        ~class "**final** RemoteReaderImpl" as RemoteReaderImpl extends AbstractRemoteReader {
            ~ RemoteReaderImpl (\n    String pluginName,\n    String localReaderName,\n    AbstractNode node,\n    String sessionId,\n    String clientNodeId)
        }
        ~class "<<<back:orange>ObservableReaderNotifier</back>>>\n**final** ObservableRemoteReaderImpl" as ObservableRemoteReaderImpl extends AbstractRemoteReader {
            ~ ObservableRemoteReaderImpl (\n    String pluginName,\n    String localReaderName,\n    AbstractNode node,\n    ExecutorService eventNotificationPool,\n    String sessionId,\n    String clientNodeId)
        }

    }

    ' Remote Readers Server

    together {

        ~abstract "<<<back:orange>ProxyReader</back>>>\n<<<back:yellow>RemoteReaderServer</back>>>\nAbstractRemoteReaderServer" as AbstractRemoteReaderServer {
            --
            ~ AbstractRemoteReaderServer (\n    AbstractRemoteReader reader,\n    String serviceId,\n    String userInputDataJson,\n    String initialCardContentJson)
            ..
            ~ String getSessionId ()
            ~ String getClientNodeId ()
        }
        ~class "**final** RemoteReaderServerImpl" as RemoteReaderServerImpl extends AbstractRemoteReaderServer {
            ~ RemoteReaderServerImpl (\n    RemoteReaderImpl reader,\n    String serviceId,\n    String userInputDataJson,\n    String initialCardContentJson)
        }
        ~class "<<<back:orange>ObservableReaderNotifier</back>>>\n<<<back:yellow>ObservableRemoteReaderServer</back>>>\n**final** ObservableRemoteReaderServerImpl" as ObservableRemoteReaderServerImpl extends AbstractRemoteReaderServer {
            --
            ~ ObservableRemoteReaderServerImpl (\n    ObservableRemoteReaderImpl reader,\n    String serviceId,\n    String userInputDataJson,\n    String initialCardContentJson,\n    ObservableRemoteReaderServerImpl masterReader)
            ..
            ~ObservableRemoteReaderServerImpl getMasterReader()
        }

    }

}

' Associations
AbstractMessageHandler "handler" <--> "node" AbstractNode #C_LINK
AsyncNodeClientImpl --> "endpoint" AsyncEndpointClient #C_LINK
AsyncNodeServerImpl --> "endpoint" AsyncEndpointServer #C_LINK
SyncNodeClientImpl --> "endpoint" SyncEndpointClient #C_LINK
RemotePluginClientImpl *--> "1..N" AbstractRemoteReader #C_LINK : readers
RemotePluginServerImpl *--> "1..N" AbstractRemoteReaderServer #C_LINK : readers
AbstractRemoteReaderServer o--> "1" AbstractRemoteReader #C_LINK : decorates
PoolRemotePluginClientImpl *--> "1..N" RemoteReaderImpl #C_LINK : readers
AbstractRemoteReader --> "node" AbstractNode #C_LINK
ServerPushEventStrategy +-- Type #C_LINK
ServerPushEventStrategy *--> "type" Type #C_LINK
ObservableRemoteReaderServerImpl *--> "0..1" ObservableRemoteReaderServerImpl #C_LINK : masterReader

' == LAYOUT ==

'Factories -[hidden]- Utilities

' == STYLE ==

package packSpi #C_GREY2 {}
package packImpl #C_GREY2 {}

abstract AbstractMessageHandler <<blue>>
abstract AbstractNode <<blue>>
class AsyncNodeClientImpl <<blue>>
class AsyncNodeServerImpl <<blue>>
class SyncNodeClientImpl <<blue>>
class SyncNodeServerImpl <<blue>>
class ServerPushEventStrategy <<blue>>
enum Type <<blue>>

abstract AbstractLocalService <<green>>
class LocalServiceClientImpl <<green>>
class LocalServiceServerImpl <<green>>
class PoolLocalServiceServerImpl <<green>>

abstract AbstractRemotePlugin <<red>>
class RemotePluginClientImpl <<red>>
class ObservableRemotePluginClientImpl <<red>>
class RemotePluginServerImpl <<red>>
class PoolRemotePluginClientImpl <<red>>
abstract AbstractRemoteReader <<red>>
class RemoteReaderImpl <<red>>
class ObservableRemoteReaderImpl <<red>>
abstract AbstractRemoteReaderServer <<red>>
class RemoteReaderServerImpl <<red>>
class ObservableRemoteReaderServerImpl <<red>>

@enduml